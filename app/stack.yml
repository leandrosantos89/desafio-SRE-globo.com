#
# usage: docker stack deploy -c stack.yml paredao
#
version: '3'

services:
  
  proxy:
    image: nginx-ubuntu
    hostname: "proxy-{{.Task.Slot}}"
    deploy:
      replicas: 2
    ports:
      - 80:80
    networks:
      - paredao_backend
      - api_backend
    volumes:
      - ./frontend:/usr/share/nginx/html
      - ./proxy/conf.d:/etc/nginx/conf.d
      - ./proxy/nginx.conf:/etc/nginx/nginx.conf
      - ./proxy/logs/:/var/log/nginx
      - /etc/localtime:/etc/localtime

  rabbitmq:
    image: 'rabbitmq:3.6-management-alpine' 
    networks:
      - api_backend
    ports:
      - 5672:5672
      - 15672:15672
      
  consumer:
    image: paredao-consumer
    networks:
      - api_backend
    deploy:
      replicas: 2
    hostname: "consumer-{{.Task.Slot}}"
    volumes:
      - ./consumer:/app
      - /etc/localtime:/etc/localtime
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH="/app"

  api:
    image: paredao-api
    tty: true
    networks:
      - api_backend
    deploy:
      replicas: 1
    hostname: "api-{{.Task.Slot}}"   
    volumes:
      - ./api:/app
      - /etc/localtime:/etc/localtime
    ports:
      - 5000:5000
    environment:
      - PYTHONPATH="/app"

  mongo:
    image: mongo
    networks:
      - api_backend
    volumes:
      - mongo_data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: n8UV9SMlP4KQiLvZwO7d

  mongo-express:
    image: mongo-express
    networks:
      - api_backend
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: n8UV9SMlP4KQiLvZwO7d
  
  # nginx-exporter:
  #   image: nginx/nginx-prometheus-exporter:0.9.0
  #   ports:
  #     - 9113:9113
  #   command:
  #     - -nginx.scrape-uri
  #     - http://proxy/stub_status
    
  # prometheus:
  #   image: prom/prometheus
  #   ports:
  #     - 9090:9090
  #   volumes:
  #     - ./monitoramento/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  # #docker run -d -p 3000:3000 --name=grafana -v grafana-storage:/var/lib/grafana grafana/grafana
  # grafana:
  #   image: grafana/grafana
  #   ports:
  #     - 3000:3000
  #   volumes:
  #     - grafana-storage:/var/lib/grafana
  #   env_file:
  #     - ./monitoramento/grafana.config

volumes:
  mongo_data:
    driver: local
  # grafana-storage:
  #   driver: local

networks:
  paredao_backend:
    external: true
  api_backend: